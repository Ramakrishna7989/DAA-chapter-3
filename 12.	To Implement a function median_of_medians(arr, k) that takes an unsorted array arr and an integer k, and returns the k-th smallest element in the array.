#include <stdio.h>

// Function to swap two integers
void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Function to partition the array and return the pivot index
int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = low - 1;

    for (int j = low; j < high; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }

    swap(&arr[i + 1], &arr[high]);
    return i + 1;
}

// Function to find the k-th smallest element using Median of Medians algorithm
int median_of_medians(int arr[], int low, int high, int k) {
    if (k > 0 && k <= high - low + 1) {
        int n = high - low + 1;
        int median[(n + 4) / 5];
        int i;

        for (i = 0; i < n / 5; i++) {
            median[i] = arr[low + i * 5 + 2];
        }

        if (i * 5 < n) {
            median[i] = arr[low + i * 5 + 2];
            i++;
        }

        int median_of_medians_val = (i == 1) ? median[i - 1] : median_of_medians(median, 0, i - 1, i / 2);

        int pos = partition(arr, low, high);

        if (pos - low == k - 1) {
            return arr[pos];
        }

        if (pos - low > k - 1) {
            return median_of_medians(arr, low, pos - 1, k);
        }

        return median_of_medians(arr, pos + 1, high, k - pos + low - 1);
    }

    return -1;
}

// Main function to test the median_of_medians function
int main() {
    int arr[] = {12, 3, 5, 7, 4, 19, 26};
    int n = sizeof(arr) / sizeof(arr[0]);
    int k = 3;

    int result = median_of_medians(arr, 0, n - 1, k);
    printf("The %d-th smallest element is: %d\n", k, result);

    return 0;
}
